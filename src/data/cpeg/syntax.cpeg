# Ches Parsing Expression Grammar
# 
# Ches Version: 0
# Author:           Garnet3106
# License:          Depends on Ches License
# Copyright:        Copyright © 2021 Garnet3106 All rights reserved.


## statements ##

class_def := "class" spacing+ id:class_id spacing* new_line+

func_def := ("@"? id):func_name spacing* "(" spacing* ")" spacing* new_line+ statement* spacing* "end" spacing* new_line+

statement |= func_call > ret_statement > var_def > var_init > var_subst

func_call |= spacing* "@"? id spacing* "(" spacing* (expression:func_args_value spacing* ","? spacing*)*:func_args spacing* ")" spacing* new_line+
ret_statement |= spacing* "ret" (spacing* expression)?:ret_value spacing* new_line+

var_def |= spacing* var_type_spc: spacing* id:var_name spacing* new_line+
var_init |= spacing* var_type_spc: spacing* id:var_name spacing* "=" spacing* expression:var_value spacing* new_line+
var_subst |= spacing* id:var_name spacing* "=" spacing* expression:var_value spacing* new_line+

# var_type, var_type_spc の id は最後に置く
# var_type_spc は var_def, var_init 用; id のみの場合は後ろに空白を強制的に入れる

var_type |= var_type_gen > id
var_type_spc |= var_type_gen > id spacing+
var_type_gen |= id spacing* "<" spacing* var_type spacing* ">"

## expressions ##

expression |= literal > id

literal |= char_literal > string_literal > number_literal

char_literal |= "'" char_char "'"
string_literal |= "\"" string_char* "\""

number_literal |= [0-9]+ ("." [0-9])?

## others ##

new_line := "\n"
spacing := " " > "\t"

id |= [a-zA-Z] [0-9a-zA-Z]*

# 文字が他のトークンにマッチしないよう最後に置く

char_char |= "\\" . > !"'" .
string_char |= "\\" . > !"\"" .
