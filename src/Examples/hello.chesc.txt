compiled_ches

group   1ef211c31e849269b28d  Examples.Hello.main
    call    5362b37v18dee91f2089
    lspush  $0
    call    b8fb5a506d94846cff48
    return

group   b8fb5a506d94846cff48  Examples.Hello.greet
    lspush  "Hello, "
    lspush  $0
    strmrg
    call    0577de596a4147f5c1db
    return



nadd

    1.スタックのトップにある２つの数字をポップする
    2.スタックにそれらの数字の演算結果をプッシュする

    スタックのトップにある２つの数字を加算します。
    スタックのトップの２つの数字はポップされ、演算結果がプッシュされます。

nsub

    1.スタックのトップにある２つの数字をポップする
    2.スタックにそれらの数字の演算結果をプッシュする

    スタックのトップにある２つの数字を減算します。
    スタックのトップの２つの数字はポップされ、演算結果がプッシュされます。

nmul

    1.スタックのトップにある２つの数字をポップする
    2.スタックにそれらの数字の演算結果をプッシュする

    スタックのトップにある２つの数字を乗算します。
    スタックのトップの２つの数字はポップされ、演算結果がプッシュされます。

ndiv

    1.スタックのトップにある２つの数字をポップする
    2.スタックにそれらの数字の演算結果をプッシュする

    スタックのトップにある２つの数字を除算します。
    スタックのトップの２つの数字はポップされ、演算結果がプッシュされます。

land

lor

call [関数番号]

    関数を呼び出します。
    ローカル要素を作成します。
    ローカルリストには最初から呼び出し時の引数が格納されます。

callmem [LL番号] [関数番号]

return [戻り値]

    戻り値を返して関数の処理を終了します。
    関数スタックを１回ポップします。
    ローカルスタックに戻り値をプッシュします。

llset [番号] [値]

    ローカルリストに値を設定します。

lspush [値]

    ローカルスタックに値をプッシュします。



< スレッドリスト (TL) >

    スレッドリストは各スレッドの情報を保持します。
    スレッド作成ごとにリストに情報が追加されます。
    このリストの要素はGLをもちます。

< グループリスト (GL) >

    グループリストは各グループの情報を保持します。
    関数呼び出しごとにリストに情報が追加されます。
    このリストの要素はLLとLSをもちます。

< ローカルリスト (LL) >

    ローカルリストはローカル変数などのリスト保持に適したデータを保持します。

< ローカルスタック (LS) >

    ローカルスタックは引数や演算結果などのスタック保持に適したデータを保持します。

< 関数呼び出し >

    1.spush命令でスタックに引数をプッシュ
    2.call命令で関数を呼ぶ

    call命令により引数の長さ分だけスタックがポップされます。
    呼び出し先の関数内でreturn命令を出すことで、呼び出し元の関数のスタックに戻り値がプッシュされます。



goto 関数内の番号で？
